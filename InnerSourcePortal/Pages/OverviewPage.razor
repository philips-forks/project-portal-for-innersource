@using InnerSourcePortal.Models
@using InnerSourcePortal.Services
@using InnerSourcePortal.Shared
@using Microsoft.AspNetCore.Components
@inject IRepositoryService _repositoryService

@if (_repositories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Modal IsOpen="@_isModalOpen" HeaderClass="flex justify-between bg-blue-500 md:p-4 lg:p-6" FooterClass="bg-blue-500 cursor-pointer">
        <Header>
            @if (_selectedRepo != null)
            {
                @_selectedRepo.Name
            }
            <button type="button" class="" @onclick="@CloseModal">&times;</button>
        </Header>
        <Body>
            @if (_selectedRepo != null)
            {
                @_selectedRepo.Language
            }
        </Body>
        <Footer>
            @if (_selectedRepo != null)
            {
                <a href="@_selectedRepo.HtmlUrl">
                    <div class="my-3 hover:underline">
                        Contribute
                    </div>
                </a>
            }
        </Footer>
    </Modal>

    <div class="min-h-screen flex items-center px-4">
        <div class='overflow-x-auto w-full'>
            <div>
                <label for="search">Search:</label>
                <input @bind-value="Text" @bind-value:event="oninput" type="text" id="search"/>
                Total Items: @_totalItems
                
                <select @bind="SelectedLanguage">
                    @if (_languages != null)
                    {
                        @foreach (string language in _languages)
                        {
                            <option value="@language">@language</option>
                        }
                    }
                </select>
                
                <select @bind="SortType">
                    @if (_sortTypes != null)
                    {
                        @foreach (string sortType in _sortTypes)
                        {
                            <option value="@sortType">@sortType</option>
                        }
                    }
                </select>
            </div>
            <table class='mx-auto max-w-4xl w-full whitespace-nowrap rounded-lg bg-white divide-y divide-gray-300'>
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Name
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Description
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Language
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Stars
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Issues
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Forks
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Score
                        </th>
                        <th class="relative px-6 py-3">
                            <span class="sr-only">Contribute</span>
                        </th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                    @foreach (Repository repo in _repositories)
                    {
                        <tr @onclick="() => ShowDetailedRepositoryModal(repo)" class="cursor-pointer">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-10 w-10">
                                        <img class="h-10 w-10 rounded-full" src="@repo.Owner.AvatarUrl" alt="">
                                    </div>
                                    <div class="ml-4">
                                        <div class="text-sm font-medium text-gray-900">
                                            @repo.Name
                                        </div>
                                        <div class="text-sm text-gray-500">
                                            <a href="@repo.HtmlUrl" class="hover:underline">@repo.FullName</a>
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-normal">
                                <div class="text-sm text-gray-900">@repo.Description</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                    @repo.Language
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @repo.StargazersCount
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @repo.OpenIssuesCount
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @repo.ForksCount
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @repo.InnerSourceMetadata.Score
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <a href="@repo.Url" class="text-indigo-600 hover:text-indigo-900">Contribute</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
}

@code {
    private List<Repository> _repositories;
    private IEnumerable<Repository> _originalRepositories;
    private List<string> _languages;
    private List<string> _sortTypes = new List<string>
    {
        "Name",
        "Activity",
        "Stars",
        "Watchers",
        "Issues",
    };

    private string _sortType;

    private string SortType
    {
        get => _sortType;
        set
        {
            if (value != _sortType)
            {
                _sortType = value;
                InvokeAsync(LoadRepositoriesBasedOnSortType);
            }
        }
    }


    private string _selectedLanguage;

    private string SelectedLanguage
    {
        get => _selectedLanguage;
        set
        {
            if (value != _selectedLanguage)
            {
                _selectedLanguage = value;
                InvokeAsync(LoadRepositoriesForSpecificLanguageAsync);
            }
        }
    }
    bool _isModalOpen = false;
    private Repository _selectedRepo;
    private string _text;
    private bool _queued = false;
    private bool _loading = false;
    private int _totalItems;

    private void ShowDetailedRepositoryModal(Repository repo)
    {
        _isModalOpen = true;
        _selectedRepo = repo;
    }

    private void CloseModal()
    {
        _isModalOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _originalRepositories = await _repositoryService.GetAllRepositories().ConfigureAwait(false);
        _repositories = _originalRepositories.ToList();
        _languages = await _repositoryService.GetAllLanguagesFromRepos(_repositories).ConfigureAwait(false);
    }

    private string Text
    {
        get => _text;
        set
        {
            if (value != _text)
            {
                _text = value;
                InvokeAsync(OnSearchAsync);
            }
        }
    }

    private void Reset()
    {
        _totalItems = 0;
        _text = string.Empty;
        _repositories = _originalRepositories.ToList();
        StateHasChanged();
    }

    private async Task OnSearchAsync()
    {
        if (!string.IsNullOrWhiteSpace(_text))
        {
            if (_loading)
            {
                _queued = true;
                return;
            }

            do
            {
                string textToSearch = _text.ToLowerInvariant();
                _loading = true;
                _queued = false;
                _repositories = _originalRepositories.Where(r =>
                    r.Name.ToLowerInvariant().Contains(textToSearch) ||
                    r.InnerSourceMetadata.Topics.Any(s => s.ToLowerInvariant().Contains(textToSearch)) ||
                    r.Homepage != null && r.Homepage.ToLowerInvariant().Contains(textToSearch) ||
                    r.Description != null && r.Description.ToLowerInvariant().Contains(textToSearch) ||
                    r.FullName != null && r.FullName.ToLowerInvariant().Contains(textToSearch) ||
                    r.HtmlUrl != null && r.HtmlUrl.ToLowerInvariant().Contains(textToSearch) ||
                    r.License is {Name: { } } && r.License.Name.ToLowerInvariant().Contains(textToSearch) ||
                    r.Language != null && r.Language.ToLowerInvariant().Contains(textToSearch)).ToList();
                _totalItems = _repositories.Count;
                _loading = false;
            }
            while (_queued);
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Reset();
        }
    }

    private async Task LoadRepositoriesForSpecificLanguageAsync()
    {
        _repositories = _originalRepositories.Where(r => r.Language != null && r.Language.ToLowerInvariant().Contains(_selectedLanguage.ToLowerInvariant())).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadRepositoriesBasedOnSortType()
    {
        if (_sortType.Equals("Name"))
        {
            _repositories = _repositories.OrderByDescending(r => r.Name).ToList();
        } else if (_sortType.Equals("Stars"))
        {
            _repositories = _repositories.OrderByDescending(r => r.StargazersCount).ToList();
        } else if (_sortType.Equals("Issues"))
        {
            _repositories = _repositories.OrderByDescending(r => r.OpenIssues).ToList();
        } else if (_sortType.Equals("Activity"))
        {
            _repositories = _repositories.OrderByDescending(r => r.InnerSourceMetadata.Score).ToList();
        } else if (_sortType.Equals("Watchers"))
        {
            _repositories = _repositories.OrderByDescending(r => r.WatchersCount).ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

}
